{"version":3,"sources":["components/Items.js","components/ItemForm.js","App.js","serviceWorker.js","index.js"],"names":["Items","items","List","map","item","Item","key","name","Header","description","ItemForm","onNewItem","useState","setName","setDescription","Form","Field","Input","placeholder","value","onChange","e","target","Button","onClick","a","fetch","method","headers","body","JSON","stringify","ok","console","log","App","setItems","useEffect","then","res","json","data","Container","style","marginTop","currentItems","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAGaA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,OACE,kBAACC,EAAA,EAAD,KACGD,EAAME,KAAI,SAAAC,GACT,OACE,kBAACF,EAAA,EAAKG,KAAN,CAAWC,IAAKF,EAAKG,MACnB,kBAACC,EAAA,EAAD,KAASJ,EAAKG,MACd,2BAAIH,EAAKK,mB,qDCPRC,EAAW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACfC,mBAAS,IADM,mBACjCL,EADiC,KAC3BM,EAD2B,OAEDD,mBAAS,IAFR,mBAEjCH,EAFiC,KAEpBK,EAFoB,KAIzC,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,YACZC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOH,WAGpC,kBAACJ,EAAA,EAAKC,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,mBACZC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIP,EAAeO,EAAEC,OAAOH,WAG3C,kBAACJ,EAAA,EAAKC,MAAN,KACE,kBAACO,EAAA,EAAD,CACEC,QAAO,sBAAE,4BAAAC,EAAA,6DACDrB,EAAO,CAACG,OAAME,eADb,SAEgBiB,MAAM,gBAAiB,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU3B,KAPhB,cAUM4B,KACXC,QAAQC,IAAI,oBACZvB,EAAUP,GACVS,EAAQ,IACRC,EAAe,KAdV,4CADX,a,SCSOqB,MA3Bf,WAAgB,IAAD,EAEavB,mBAAS,IAFtB,mBAENX,EAFM,KAECmC,EAFD,KAYb,OARAC,qBAAU,WACRX,MAAM,cAAcY,MAAK,SAAAC,GAAG,OAC1BA,EAAIC,OAAOF,MAAK,SAAAG,GACdL,EAASK,EAAKxC,eAGjB,IAGD,kBAACyC,EAAA,EAAD,CACEC,MAAO,CAAEC,UAAW,KAEpB,kBAAC,EAAD,CACEjC,UAAW,SAAAP,GAAI,OAAIgC,GAAS,SAAAS,GAAY,OAAKzC,GAAL,mBAAcyC,UAExD,yCAAgBC,OAAOC,OACvB,kBAAC,EAAD,CACE9C,MAAQA,MCfI+C,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"js/main.37a18c46.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Header } from 'semantic-ui-react';\n\nexport const Items = ({ items }) => {\n  return (\n    <List>\n      {items.map(item => {\n        return (\n          <List.Item key={item.name}>\n            <Header>{item.name}</Header>\n            <p>{item.description}</p>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n}","import React, { useState } from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\n\nexport const ItemForm = ({ onNewItem }) => {\n  const [ name, setName ] = useState('');\n  const [ description, setDescription ] = useState('');\n\n  return (\n    <Form>\n      <Form.Field>\n        <Input \n          placeholder=\"item name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Input \n          placeholder=\"item description\"\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Button \n          onClick={async () => {\n            const item = {name, description};\n            const response = await fetch('/api/add_item', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(item)\n            });\n\n            if (response.ok) {\n              console.log('response worked!');\n              onNewItem(item);\n              setName('');\n              setDescription('');\n            }\n          }}\n        >submit</Button>\n      </Form.Field>\n    </Form>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Items } from './components/Items';\nimport { ItemForm } from './components/ItemForm';\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/items').then(res => \n      res.json().then(data => {\n        setItems(data.items)\n      })\n    );\n  }, []);\n  \n  return (\n    <Container \n      style={{ marginTop: 40 }}\n    >\n      <ItemForm \n        onNewItem={item => setItems(currentItems => [item, ...currentItems])}\n      />\n      <p>My Token = { window.token }</p>\n      <Items \n        items={ items }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}